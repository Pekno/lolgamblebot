name: Build and Publish Docker Image
on:
  push:
    paths:
      - 'package.json' # Trigger only when package.json is modified
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: "Specify a version (optional, overrides package.json file)"
        required: false
        default: ""
      
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Get the diff of package.json to check for a version bump
      - name: Check if version was bumped
        id: version_check
        run: |
          # Fetch full commit history to ensure HEAD~1 is available
          git fetch --depth=2
          
          # Get the previous and current version from package.json
          PREVIOUS_VERSION=$(git show HEAD~1:package.json | jq -r .version)
          CURRENT_VERSION=$(jq -r .version < package.json)

          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"

          # Compare versions
          if [ "$PREVIOUS_VERSION" = "$CURRENT_VERSION" ]; then
            echo "Version was not bumped."
            exit 1 # Exit with failure if version wasn't bumped
          fi

          echo "Version was bumped successfully."
          echo "VERSION=$CURRENT_VERSION" >> $GITHUB_ENV  # Set the version as an environment variable
      
      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Replace with your desired Node.js version

      # Install dependencies and build the project
      - name: Install and Build
        run: |
          npm install
          npm run build
        
      # Log in to Docker Hub or GitHub Container Registry
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      # Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ vars.DOCKERHUB_IMAGE }}:latest .
          docker tag ${{ vars.DOCKERHUB_IMAGE }}:latest ${{ vars.DOCKERHUB_IMAGE }}:${{ env.VERSION }}
          
      # Push the Docker image
      - name: Push Docker Image
        run: |
          docker push ${{ vars.DOCKERHUB_IMAGE }}:latest
          docker push ${{ vars.DOCKERHUB_IMAGE }}:${{ env.VERSION }}
